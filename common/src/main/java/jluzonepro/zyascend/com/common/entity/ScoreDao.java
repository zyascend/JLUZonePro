package jluzonepro.zyascend.com.common.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCORE".
*/
public class ScoreDao extends AbstractDao<Score, Long> {

    public static final String TABLENAME = "SCORE";

    /**
     * Properties of entity Score.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CourseId = new Property(0, long.class, "courseId", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Score = new Property(2, String.class, "score", false, "SCORE");
        public final static Property Gpoint = new Property(3, String.class, "gpoint", false, "GPOINT");
        public final static Property Credit = new Property(4, String.class, "credit", false, "CREDIT");
        public final static Property IsPass = new Property(5, String.class, "isPass", false, "IS_PASS");
        public final static Property AsId = new Property(6, int.class, "asId", false, "AS_ID");
        public final static Property StuName = new Property(7, String.class, "stuName", false, "STU_NAME");
        public final static Property StuId = new Property(8, int.class, "stuId", false, "STU_ID");
        public final static Property TermId = new Property(9, int.class, "termId", false, "TERM_ID");
        public final static Property TermName = new Property(10, String.class, "termName", false, "TERM_NAME");
    }


    public ScoreDao(DaoConfig config) {
        super(config);
    }
    
    public ScoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCORE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: courseId
                "\"NAME\" TEXT," + // 1: name
                "\"SCORE\" TEXT," + // 2: score
                "\"GPOINT\" TEXT," + // 3: gpoint
                "\"CREDIT\" TEXT," + // 4: credit
                "\"IS_PASS\" TEXT," + // 5: isPass
                "\"AS_ID\" INTEGER NOT NULL ," + // 6: asId
                "\"STU_NAME\" TEXT," + // 7: stuName
                "\"STU_ID\" INTEGER NOT NULL ," + // 8: stuId
                "\"TERM_ID\" INTEGER NOT NULL ," + // 9: termId
                "\"TERM_NAME\" TEXT);"); // 10: termName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCORE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Score entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCourseId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(3, score);
        }
 
        String gpoint = entity.getGpoint();
        if (gpoint != null) {
            stmt.bindString(4, gpoint);
        }
 
        String credit = entity.getCredit();
        if (credit != null) {
            stmt.bindString(5, credit);
        }
 
        String isPass = entity.getIsPass();
        if (isPass != null) {
            stmt.bindString(6, isPass);
        }
        stmt.bindLong(7, entity.getAsId());
 
        String stuName = entity.getStuName();
        if (stuName != null) {
            stmt.bindString(8, stuName);
        }
        stmt.bindLong(9, entity.getStuId());
        stmt.bindLong(10, entity.getTermId());
 
        String termName = entity.getTermName();
        if (termName != null) {
            stmt.bindString(11, termName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Score entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getCourseId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String score = entity.getScore();
        if (score != null) {
            stmt.bindString(3, score);
        }
 
        String gpoint = entity.getGpoint();
        if (gpoint != null) {
            stmt.bindString(4, gpoint);
        }
 
        String credit = entity.getCredit();
        if (credit != null) {
            stmt.bindString(5, credit);
        }
 
        String isPass = entity.getIsPass();
        if (isPass != null) {
            stmt.bindString(6, isPass);
        }
        stmt.bindLong(7, entity.getAsId());
 
        String stuName = entity.getStuName();
        if (stuName != null) {
            stmt.bindString(8, stuName);
        }
        stmt.bindLong(9, entity.getStuId());
        stmt.bindLong(10, entity.getTermId());
 
        String termName = entity.getTermName();
        if (termName != null) {
            stmt.bindString(11, termName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Score readEntity(Cursor cursor, int offset) {
        Score entity = new Score( //
            cursor.getLong(offset + 0), // courseId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // score
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gpoint
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // credit
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // isPass
            cursor.getInt(offset + 6), // asId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // stuName
            cursor.getInt(offset + 8), // stuId
            cursor.getInt(offset + 9), // termId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // termName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Score entity, int offset) {
        entity.setCourseId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setScore(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGpoint(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCredit(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsPass(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAsId(cursor.getInt(offset + 6));
        entity.setStuName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStuId(cursor.getInt(offset + 8));
        entity.setTermId(cursor.getInt(offset + 9));
        entity.setTermName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Score entity, long rowId) {
        entity.setCourseId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Score entity) {
        if(entity != null) {
            return entity.getCourseId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Score entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
