package jluzonepro.zyascend.com.common.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TERM".
*/
public class TermDao extends AbstractDao<Term, Long> {

    public static final String TABLENAME = "TERM";

    /**
     * Properties of entity Term.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property TermName = new Property(1, String.class, "termName", false, "TERM_NAME");
        public final static Property StartDate = new Property(2, String.class, "startDate", false, "START_DATE");
        public final static Property TermSeq = new Property(3, String.class, "termSeq", false, "TERM_SEQ");
        public final static Property ExamDate = new Property(4, String.class, "examDate", false, "EXAM_DATE");
        public final static Property TermType = new Property(5, String.class, "termType", false, "TERM_TYPE");
        public final static Property ActiveStage = new Property(6, String.class, "activeStage", false, "ACTIVE_STAGE");
        public final static Property Year = new Property(7, String.class, "year", false, "YEAR");
        public final static Property VacationDate = new Property(8, String.class, "vacationDate", false, "VACATION_DATE");
        public final static Property Weeks = new Property(9, String.class, "weeks", false, "WEEKS");
        public final static Property TermId = new Property(10, String.class, "termId", false, "TERM_ID");
        public final static Property Egrade = new Property(11, String.class, "egrade", false, "EGRADE");
    }


    public TermDao(DaoConfig config) {
        super(config);
    }
    
    public TermDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TERM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TERM_NAME\" TEXT," + // 1: termName
                "\"START_DATE\" TEXT," + // 2: startDate
                "\"TERM_SEQ\" TEXT," + // 3: termSeq
                "\"EXAM_DATE\" TEXT," + // 4: examDate
                "\"TERM_TYPE\" TEXT," + // 5: termType
                "\"ACTIVE_STAGE\" TEXT," + // 6: activeStage
                "\"YEAR\" TEXT," + // 7: year
                "\"VACATION_DATE\" TEXT," + // 8: vacationDate
                "\"WEEKS\" TEXT," + // 9: weeks
                "\"TERM_ID\" TEXT," + // 10: termId
                "\"EGRADE\" TEXT);"); // 11: egrade
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TERM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Term entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String termName = entity.getTermName();
        if (termName != null) {
            stmt.bindString(2, termName);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(3, startDate);
        }
 
        String termSeq = entity.getTermSeq();
        if (termSeq != null) {
            stmt.bindString(4, termSeq);
        }
 
        String examDate = entity.getExamDate();
        if (examDate != null) {
            stmt.bindString(5, examDate);
        }
 
        String termType = entity.getTermType();
        if (termType != null) {
            stmt.bindString(6, termType);
        }
 
        String activeStage = entity.getActiveStage();
        if (activeStage != null) {
            stmt.bindString(7, activeStage);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(8, year);
        }
 
        String vacationDate = entity.getVacationDate();
        if (vacationDate != null) {
            stmt.bindString(9, vacationDate);
        }
 
        String weeks = entity.getWeeks();
        if (weeks != null) {
            stmt.bindString(10, weeks);
        }
 
        String termId = entity.getTermId();
        if (termId != null) {
            stmt.bindString(11, termId);
        }
 
        String egrade = entity.getEgrade();
        if (egrade != null) {
            stmt.bindString(12, egrade);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Term entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String termName = entity.getTermName();
        if (termName != null) {
            stmt.bindString(2, termName);
        }
 
        String startDate = entity.getStartDate();
        if (startDate != null) {
            stmt.bindString(3, startDate);
        }
 
        String termSeq = entity.getTermSeq();
        if (termSeq != null) {
            stmt.bindString(4, termSeq);
        }
 
        String examDate = entity.getExamDate();
        if (examDate != null) {
            stmt.bindString(5, examDate);
        }
 
        String termType = entity.getTermType();
        if (termType != null) {
            stmt.bindString(6, termType);
        }
 
        String activeStage = entity.getActiveStage();
        if (activeStage != null) {
            stmt.bindString(7, activeStage);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(8, year);
        }
 
        String vacationDate = entity.getVacationDate();
        if (vacationDate != null) {
            stmt.bindString(9, vacationDate);
        }
 
        String weeks = entity.getWeeks();
        if (weeks != null) {
            stmt.bindString(10, weeks);
        }
 
        String termId = entity.getTermId();
        if (termId != null) {
            stmt.bindString(11, termId);
        }
 
        String egrade = entity.getEgrade();
        if (egrade != null) {
            stmt.bindString(12, egrade);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Term readEntity(Cursor cursor, int offset) {
        Term entity = new Term( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // termName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // startDate
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // termSeq
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // examDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // termType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // activeStage
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // year
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // vacationDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // weeks
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // termId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // egrade
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Term entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTermName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTermSeq(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExamDate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTermType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setActiveStage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setYear(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVacationDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWeeks(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTermId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEgrade(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Term entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Term entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Term entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
