package jluzonepro.zyascend.com.common.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STU_INFO".
*/
public class StuInfoDao extends AbstractDao<StuInfo, Long> {

    public static final String TABLENAME = "STU_INFO";

    /**
     * Properties of entity StuInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Key = new Property(0, long.class, "key", true, "_id");
        public final static Property StuId = new Property(1, int.class, "stuId", false, "STU_ID");
        public final static Property CurrentTerm = new Property(2, int.class, "currentTerm", false, "CURRENT_TERM");
        public final static Property Account = new Property(3, String.class, "account", false, "ACCOUNT");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property PassWord = new Property(5, String.class, "passWord", false, "PASS_WORD");
        public final static Property IsAutoLogin = new Property(6, boolean.class, "isAutoLogin", false, "IS_AUTO_LOGIN");
        public final static Property IsRememberPass = new Property(7, boolean.class, "isRememberPass", false, "IS_REMEMBER_PASS");
        public final static Property IsLoginOutside = new Property(8, boolean.class, "isLoginOutside", false, "IS_LOGIN_OUTSIDE");
    }


    public StuInfoDao(DaoConfig config) {
        super(config);
    }
    
    public StuInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STU_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: key
                "\"STU_ID\" INTEGER NOT NULL ," + // 1: stuId
                "\"CURRENT_TERM\" INTEGER NOT NULL ," + // 2: currentTerm
                "\"ACCOUNT\" TEXT," + // 3: account
                "\"NAME\" TEXT," + // 4: name
                "\"PASS_WORD\" TEXT," + // 5: passWord
                "\"IS_AUTO_LOGIN\" INTEGER NOT NULL ," + // 6: isAutoLogin
                "\"IS_REMEMBER_PASS\" INTEGER NOT NULL ," + // 7: isRememberPass
                "\"IS_LOGIN_OUTSIDE\" INTEGER NOT NULL );"); // 8: isLoginOutside
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STU_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StuInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getKey());
        stmt.bindLong(2, entity.getStuId());
        stmt.bindLong(3, entity.getCurrentTerm());
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(4, account);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(6, passWord);
        }
        stmt.bindLong(7, entity.getIsAutoLogin() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsRememberPass() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsLoginOutside() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StuInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getKey());
        stmt.bindLong(2, entity.getStuId());
        stmt.bindLong(3, entity.getCurrentTerm());
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(4, account);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String passWord = entity.getPassWord();
        if (passWord != null) {
            stmt.bindString(6, passWord);
        }
        stmt.bindLong(7, entity.getIsAutoLogin() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsRememberPass() ? 1L: 0L);
        stmt.bindLong(9, entity.getIsLoginOutside() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public StuInfo readEntity(Cursor cursor, int offset) {
        StuInfo entity = new StuInfo( //
            cursor.getLong(offset + 0), // key
            cursor.getInt(offset + 1), // stuId
            cursor.getInt(offset + 2), // currentTerm
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // account
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // passWord
            cursor.getShort(offset + 6) != 0, // isAutoLogin
            cursor.getShort(offset + 7) != 0, // isRememberPass
            cursor.getShort(offset + 8) != 0 // isLoginOutside
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StuInfo entity, int offset) {
        entity.setKey(cursor.getLong(offset + 0));
        entity.setStuId(cursor.getInt(offset + 1));
        entity.setCurrentTerm(cursor.getInt(offset + 2));
        entity.setAccount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPassWord(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsAutoLogin(cursor.getShort(offset + 6) != 0);
        entity.setIsRememberPass(cursor.getShort(offset + 7) != 0);
        entity.setIsLoginOutside(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StuInfo entity, long rowId) {
        entity.setKey(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StuInfo entity) {
        if(entity != null) {
            return entity.getKey();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StuInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
